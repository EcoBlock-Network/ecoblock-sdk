// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import


import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';


final rustApiProvider = Provider<RustApiService>((ref) {
  return RustApiService();
});

class RustApiService {
  String greet({required String name}) =>
      RustLib.instance.api.crateApiSimpleGreet(name: name);

  Future<String> frbCreateBlock({required List<int> data, required List<String> parents}) =>
      RustLib.instance.api.crateApiSimpleFrbCreateBlock(data: data, parents: parents);

  Future<BigInt> frbGetTangleSize() =>
      RustLib.instance.api.crateApiSimpleFrbGetTangleSize();

  Future<void> frbAddPeerConnection({required String from, required String to, required double weight}) =>
      RustLib.instance.api.crateApiSimpleFrbAddPeerConnection(from: from, to: to, weight: weight);

  Future<List<String>> frbListPeers({required String peerId}) =>
      RustLib.instance.api.crateApiSimpleFrbListPeers(peerId: peerId);

  Future<String> frbCreateBlockWithParents({required List<int> data, required List<String> parents}) =>
      RustLib.instance.api.crateApiSimpleFrbCreateBlockWithParents(data: data, parents: parents);

  Future<String> frbGetPublicKey() =>
      RustLib.instance.api.crateApiSimpleFrbGetPublicKey();

  Future<String> frbPropagateBlock({required List<int> data, required List<String> parents}) =>
      RustLib.instance.api.crateApiSimpleFrbPropagateBlock(data: data, parents: parents);
}

/// Wrapper pour créer un bloc depuis Flutter
Future<String> frbCreateBlock({
  required List<int> data,
  required List<String> parents,
}) => RustLib.instance.api.crateApiSimpleFrbCreateBlock(
  data: data,
  parents: parents,
);

/// Wrapper pour obtenir la taille du tangle depuis Flutter
Future<BigInt> frbGetTangleSize() =>
    RustLib.instance.api.crateApiSimpleFrbGetTangleSize();

/// Wrapper pour ajouter une connexion entre deux peers
Future<void> frbAddPeerConnection({
  required String from,
  required String to,
  required double weight,
}) => RustLib.instance.api.crateApiSimpleFrbAddPeerConnection(
  from: from,
  to: to,
  weight: weight,
);

/// Wrapper pour lister les voisins d'un peer
Future<List<String>> frbListPeers({required String peerId}) =>
    RustLib.instance.api.crateApiSimpleFrbListPeers(peerId: peerId);

/// Wrapper complet pour créer un bloc avec parents
Future<String> frbCreateBlockWithParents({
  required List<int> data,
  required List<String> parents,
}) => RustLib.instance.api.crateApiSimpleFrbCreateBlockWithParents(
  data: data,
  parents: parents,
);

Future<String> frbGetPublicKey() =>
    RustLib.instance.api.crateApiSimpleFrbGetPublicKey();

Future<String> frbPropagateBlock({
  required List<int> data,
  required List<String> parents,
}) => RustLib.instance.api.crateApiSimpleFrbPropagateBlock(
  data: data,
  parents: parents,
);
